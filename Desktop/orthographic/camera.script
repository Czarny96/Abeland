go.property("near_z", -1)
go.property("far_z", 1)
go.property("zoom", 1)
go.property("projection", hash("DEFAULT"))
go.property("enabled", true)

go.property("offset_gui", false)

go.property("follow", false)
go.property("follow_target", hash(""))
go.property("follow_lerp", 0.5)
go.property("follow_offset", vmath.vector3(0, 0, 0))

go.property("bounds_left", 0)
go.property("bounds_bottom", 0)
go.property("bounds_right", 0)
go.property("bounds_top", 0)
go.property("deadzone_left", 0)
go.property("deadzone_bottom", 0)
go.property("deadzone_right", 0)
go.property("deadzone_top", 0)



local camera = require "orthographic.camera"


local ENABLE = hash("enable")
local DISABLE = hash("disable")
local UNFOLLOW = hash("unfollow")
local FOLLOW = hash("follow")
local RECOIL = hash("recoil")
local SHAKE = hash("shake")
local STOP_SHAKING = hash("stop_shaking")
local DEADZONE = hash("deadzone")
local BOUNDS = hash("bounds")
local UPDATE_CAMERA = hash("update_camera")
local ZOOM_TO = hash("zoom_to")
local USE_PROJECTION = hash("use_projection")

function init(self)
	camera.init(go.get_id(), msg.url(), { zoom = self.zoom })
	if self.enabled then
		camera.update(go.get_id(), 0)
		camera.send_view_projection(go.get_id())
	end
end


function final(self)
	camera.final(go.get_id())
end


function update(self, dt)
	if self.enabled then
		-- update camera and view projection after all game objects have been updated
		-- will jitter otherwise
		msg.post("#", UPDATE_CAMERA, { dt = dt })
	end
end


function on_message(self, message_id, message, sender)
	if message_id == UPDATE_CAMERA then
		camera.update(go.get_id(), message.dt)
		camera.send_view_projection(go.get_id())
		if self.offset_gui then
			camera.send_camera_offset(go.get_id())
		end
	elseif message_id == ENABLE then
		self.enabled = true
	elseif message_id == DISABLE then
		self.enabled = false
	elseif message_id == UNFOLLOW then
		self.follow = false
	elseif message_id == USE_PROJECTION then
		assert(message.projection, "You must provide a projection")
		self.projection = message.projection
	elseif message_id == FOLLOW then
		assert(message.target, "You must provide a target")
		self.follow = true
		self.follow_target = type(message.target) == "string" and hash(message.target) or message.target
		self.follow_lerp = message.lerp or 1
		self.follow_offset = message.offset or vmath.vector3()
	elseif message_id == DEADZONE then
		self.deadzone_right = message.right or 0
		self.deadzone_top = message.top or 0
		self.deadzone_left = message.left or 0
		self.deadzone_bottom = message.bottom or 0
	elseif message_id == BOUNDS then
		self.bounds_right = message.right or 0
		self.bounds_top = message.top or 0
		self.bounds_left = message.left or 0
		self.bounds_bottom = message.bottom or 0
	elseif message_id == SHAKE then
		camera.shake(go.get_id(), message.intensity, message.duration, message.direction, function()
			msg.post(sender, "shake_completed")
		end)
	elseif message_id == RECOIL then
		camera.recoil(go.get_id(), message.offset, message.duration)
	elseif message_id == STOP_SHAKING then
		camera.stop_shaking(go.get_id())
	elseif message_id == ZOOM_TO then
		assert(message.zoom, "You must provide a zoom level")
		self.zoom = message.zoom
	end
end