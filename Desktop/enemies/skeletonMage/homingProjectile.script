-- ENEMY MAGE HOMING ATTACK
local playersManager = require "managers.playersManager"
local globals = require "main.globals"

-- Global properties
go.property("damage", 15)

function init(self)
	-- Local Settings
	self.projectileSpeed = 70
	self.projectileSpeedByDistanceMultiplier = 0.0012
	self.projectileLife = 5
	-- Local Timers
	self.checkClosestPlayerPosTimer = 0
	-- ClosestPlayerID to follow
	self.closestPlayerID = playersManager.getClosestPlayerID(go.get_position())
end

local function rotate(self)
	local l_angle = math.atan2(self.movingDir.y, self.movingDir.x)
	go.set_rotation(vmath.quat_rotation_z(l_angle))
end

local function countDistanceAndDirection(self)
	-- Count possition diffrence between closest player and enemy to designate enemy moving direction
	self.closestPlayerID = playersManager.getClosestPlayerID(go.get_position())
	if self.closestPlayerID ~= 0 then
		local closestPlayerPos = playersManager.getPlayerPos(self.closestPlayerID)
		self.distanceToClosestPlayer = math.pow((closestPlayerPos.x - self.enemyPos.x), 2) +  math.pow((closestPlayerPos.y - self.enemyPos.y), 2)
		local positionDiffrence = closestPlayerPos - self.enemyPos
		self.movingDir = vmath.vector3(positionDiffrence.x, positionDiffrence.y, 0)
		self.movingDir = vmath.normalize(self.movingDir)
	end
end

local function moveEnemy(self, dt)
	self.enemyPos = self.enemyPos + self.movingDir * (self.projectileSpeed + self.distanceToClosestPlayer * self.projectileSpeedByDistanceMultiplier) * dt
	go.set_position(self.enemyPos)
end

function update(self, dt)
	-- If game is paused stop enemy
	if globals.getPause() then
		return
	end
	-- Save go position once to limit number of "go.get_position" uses 		
	self.enemyPos = go.get_position()
	-- Count distance and direction four times per second only to prevent huge resource consuming
	if self.checkClosestPlayerPosTimer <= 0 then 
		countDistanceAndDirection(self)
		self.checkClosestPlayerPosTimer = 0.25
	end	
	if self.projectileLife <= 0 then
		go.delete()
	else
		moveEnemy(self, dt)
		self.projectileLife = self.projectileLife - dt
		self.checkClosestPlayerPosTimer = self.checkClosestPlayerPosTimer - dt
	end 

	rotate(self)
	
	-- DRAW ORDER
	g_applyDrawOrder(go.get_id(), 2)
end

local function playersCollision(self, message_id, message, sender)
	local playerUrl = msg.url(nil, message.other_id, "player")
	--Send message about dealt damage
	msg.post(playerUrl, "hit", {dmg = self.damage})
	go.delete()
end

function on_message(self, message_id, message, sender)
	if globals.getPause() then
		return
	end
	if message_id == hash("collision_response") then
		if message.group == hash("player") then
			playersCollision(self, message_id, message, sender)
		end
	end
	if message_id == hash("contact_point_response") then
		go.delete()
	end
end
