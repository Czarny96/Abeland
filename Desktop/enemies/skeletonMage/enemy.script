--SKELETON MAGE
local shaderManager = require "managers/shaderManager"
local enemyManager = require "managers.enemyManager"
local bodyManager = require "managers/bodyManager.bodyManager"
local globals = require "main.globals"
local shaderManager = require "managers/shaderManager"
local playerManager = require "managers.playersManager"
local enemyModule = require "enemies.enemyModule"

-- Global properties
go.property("type", hash("skeletonMage"))
go.property("health", 100)
go.property("isRanged", true)

--States
go.property("stunDuration", 0)			--duration of stun in s

go.property("tauntTarget", hash("")) --id of entity whose taunt is it 
go.property("tauntDuration", 0) --duration of taunt in s

go.property("slowAmount", 0)	--percent of slow, ex: movementSpeed * slow/100
go.property("slowDuration", 0)	--duration of slow in s

go.property("rootDuration", 0)			--duration of root in s

function init(self)
	self.attackCD = 5
	self.attackCDrandomized = self.attackCD + math.random(-2, 2)
	self.moveAfterAttCD = 0
	self.attackTimer = self.attackCDrandomized

	self.lastHitVector = nil

	self.targetId = nil
	self.targetPosition = nil

	enemyModule.setTarget(self)
end

local function attack(self, message_id, message, sender)
	if self.attackTimer >= self.attackCDrandomized then
		self.attackCDrandomized = self.attackCD + math.random(-2, 2)
		self.attackTimer = 0

		-- create homing missile
		local dir = vmath.normalize(message.other_position - go.get_position())
		dir.x = dir.x + math.random()/2.0 - 0.25
		dir.y = dir.y + math.random()/2.0 - 0.25
		dir = vmath.normalize(dir)
		local angle = math.atan2(dir.x, -dir.y)
		local rotation = vmath.quat_rotation_z(angle)
		local pos = go.get_position() + dir*20
		pos.z = 0
		factory.create("#enemyMageHomingAttackFactory", pos, rotation, {direction = dir})

		self.lastHitVector = dir
	end
end

function update(self, dt)
	if globals.getPause() then
		return
	end

	label.set_text("#hpLabel", tostring(self.health))
	
	enemyModule.manageStates(self, dt)
	enemyModule.handleDeath(self, dt)

	if not enemyModule.setTarget(self) then
		-- all players are dead, so enemy will do nothing
		return
	end	

	if self.targetId then
		self.targetPosition = go.get_position(self.targetId)
	else
		self.targetPosition = nil
	end

	enemyModule.move(self, dt)

	
	self.attackTimer = self.attackTimer + dt
	self.moveAfterAttCD = self.moveAfterAttCD - dt

	-- DRAW ORDER
	g_applyDrawOrder(go.get_id(), 2)
end

function on_message(self, message_id, message, sender)
	--Handle collision
	if message_id == hash("collision_response") then
		if message.own_group == hash("enemy") and message.other_group ~= hash("attack") then
			enemyModule.collisionWithEntity(self, message_id, message, sender)
		elseif message.own_group == hash("attackRange") then
			local playerURL = msg.url(nil, message.other_id, "player")
			self.moveAfterAttCD = 0.3
			if go.get(playerURL, "isTargetable") then
				attack(self, message_id, message, sender)
			end
		end
	end

	enemyModule.handleMessage(self, message_id, message, sender)
end