local globals = require "main.globals"
local playersManager = require "player.playersManager"

go.property("enemyMovingDir", vmath.vector3(0, 0, 0))
go.property("health", 100)
go.property("damage", 20)
go.property("isKilled", false)

function init(self)
	--Local settings
	self.movingSpeed = 50
	self.followDistance = 50
	self.killedTimer = 0
	--Local Colliders
	self.wallsCollider = {top = false, bottom = false,left = false,right = false}
	label.set_text("#label_hp", self.health)
end

local function updateAnimation(self)
	if self.enemyMovingDir.x < -0.3 and self.enemyMovingDir.y > 0.3 then
		msg.post("#sprite", "play_animation", {id = hash("enemy_up_left")})
	elseif self.enemyMovingDir.x > 0.3 and self.enemyMovingDir.y > 0.3 then
		msg.post("#sprite", "play_animation", {id = hash("enemy_up_right")})
	elseif self.enemyMovingDir.x < -0.3 and self.enemyMovingDir.y < -0.3 then
		msg.post("#sprite", "play_animation", {id = hash("enemy_down_left")})
	elseif self.enemyMovingDir.x > 0.3 and self.enemyMovingDir.y < -0.3 then
		msg.post("#sprite", "play_animation", {id = hash("enemy_down_right")})
	elseif self.enemyMovingDir.y > 0.3  then
		msg.post("#sprite", "play_animation", {id = hash("enemy_up")})
	elseif self.enemyMovingDir.y < -0.3  then
		msg.post("#sprite", "play_animation", {id = hash("enemy_down")})
	elseif self.enemyMovingDir.x < -0.3  then
		msg.post("#sprite", "play_animation", {id = hash("enemy_left")})
	elseif self.enemyMovingDir.x > 0.3  then
		msg.post("#sprite", "play_animation", {id = hash("enemy_right")})
	else 
		msg.post("#sprite", "play_animation", {id = hash("enemy_down")})
	end
end

local function playDeathAnimation(self)
	msg.post("#sprite", "play_animation", {id = hash("enemy_killed")})
	msg.post("#death_sound", "play_sound", {gain = 0.5})
end

function update(self, dt)
	if playersManager.getActivePlayersIDs() ~= 0 and self.isKilled == false then
		local enemyPos = go.get_position()
		local closestPlayerID = playersManager.getClosestPlayerID(enemyPos)
		local closestPlayerPos = playersManager.getPlayerPos(closestPlayerID)
		local distanceToClosestPlayer = vmath.length(closestPlayerPos - enemyPos)
		
		local positionDiffrenceAbs = closestPlayerPos - enemyPos
		positionDiffrenceAbs.x = math.abs(positionDiffrenceAbs.x)
		positionDiffrenceAbs.y = math.abs(positionDiffrenceAbs.y)

		local positionDiffrence = closestPlayerPos - enemyPos

		self.enemyMovingDir = vmath.vector3(positionDiffrence.x, positionDiffrence.y, 0)

		--Collisions with arena walls
		if (self.wallsCollider.top and self.enemyMovingDir.y > 0) or (self.wallsCollider.bottom and self.enemyMovingDir.y < 0) then
			self.enemyMovingDir.y = 0
		end
		if (self.wallsCollider.left and self.enemyMovingDir.x < 0) or (self.wallsCollider.right and self.enemyMovingDir.x > 0) then
			self.enemyMovingDir.x = 0
		end
		
		self.enemyMovingDir = vmath.normalize(self.enemyMovingDir)

		if distanceToClosestPlayer >= self.followDistance then
			enemyPos = enemyPos + self.enemyMovingDir * self.movingSpeed * dt
			go.set_position(enemyPos)
			updateAnimation(self)
		end
	end
	
	if self.health <= 0 then
		if self.isKilled == false then
			playDeathAnimation(self)
			self.killedTimer = 10
			self.isKilled = true
		end

		if self.killedTimer <= 0 then
			go.delete()
		else
			self.killedTimer = self.killedTimer - dt
		end
	end

	--Collider flags
	self.wallsCollider.top = false
	self.wallsCollider.bottom = false
	self.wallsCollider.left = false
	self.wallsCollider.right = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") and self.isKilled == false then
		if message.group == hash("attacks") then
			local attackDmg = go.get(globals.unhash(message.other_id).."#rangeAttack", "damage")
			self.health = self.health - attackDmg
			label.set_text("#label_hp", self.health)
		end
		if message.group == hash("players") then
			local enemyPos = go.get_position()
			local closestPlayerID = playersManager.getClosestPlayerID(enemyPos)
			local playerUrl = closestPlayerID.."#player"
			--Send message about dealt damage
			msg.post(playerUrl,"hit", {dmg = self.damage})
		end
	end
	if message_id == hash("contact_point_response") then	
		--Walls
		if message.group == hash("walls") then
			if sender.fragment == hash("wallsTopCollider") then
				self.wallsCollider.top = true
			elseif sender.fragment == hash("wallsBottomCollider") then
				self.wallsCollider.bottom = true
			end
			if sender.fragment == hash("wallsLeftCollider") then
				self.wallsCollider.left = true
			elseif sender.fragment == hash("wallsRightCollider") then
				self.wallsCollider.right = true
			end
		end
	end
end
