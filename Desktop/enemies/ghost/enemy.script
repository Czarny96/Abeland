--GHOST
local shaderManager = require "managers/shaderManager"
local enemyManager = require "managers.enemyManager"
local bodyManager = require "managers/bodyManager.bodyManager"
local globals = require "main.globals"
local shaderManager = require "managers/shaderManager"
local playerManager = require "managers.playersManager"
local enemyModule = require "enemies.enemyModule"

-- Global properties
go.property("type", hash("ghost"))
go.property("health", 100)
go.property("damage", 15)
go.property("isRanged", false)

--States
go.property("stunDuration", 0)			--duration of stun in s

go.property("tauntTarget", hash("")) --id of entity whose taunt is it 
go.property("tauntDuration", 0) --duration of taunt in s

go.property("slowAmount", 0)	--percent of slow, ex: movementSpeed * slow/100
go.property("slowDuration", 0)	--duration of slow in s

go.property("rootDuration", 0)			--duration of root in s

function init(self)
	-- every enemy has different behavior
	self.random = math.random(4, 10)

	self.movementSpeed = 1
	
	self.actionTimer = 0
	self.chargeTimer = 5
	self.attackCD = 2
	self.moveAfterAttCD = 0
	self.attackTimer = self.attackCD

	self.playerWithLowestHp = nil
	self.playerInRange = nil

	self.lastHitVector = nil

	enemyModule.setTarget(self)
end

-- HIDE SPRITE 
local function hideSprite(self)
	self.spriteHidden = true
	msg.post("#hpLabel", "disable")
	go.cancel_animations("#sprite", "tint.w")
	go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTQUART, 3)
end

local function showSprite(self)
	self.spriteHidden = false
	msg.post("#hpLabel", "enable")
	go.cancel_animations("#sprite", "tint.w")
	go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTQUART, 3)
end

-- END OF HIDE SPRITE

local function attack(self, message_id, message, sender)
	if self.stunDuration <= 0 and self.attackTimer >= self.attackCD and self.chargeTimer > 2 then
		self.attackTimer = 0

		--msg.post(message.other_id, "hit", {enemy_position = go.get_position()})
		msg.post(message.other_id, "hit", {dmg = self.damage})

		local dir = vmath.normalize(message.other_position - go.get_position())
		local angle = math.atan2(dir.x, -dir.y)
		local rotation = vmath.quat_rotation_z(angle)
		local pos = go.get_position() + dir*50
		pos.z = 0
		factory.create("#attackFactory", pos, rotation)
		self.lastHitVector = dir
	end
end

function update(self, dt)
	if globals.getPause() then
		return
	end

	enemyModule.manageStates(self, dt)
	
	label.set_text("#hpLabel", tostring(self.health))
	
	enemyModule.manageStates(self, dt)
	enemyModule.handleDeath(self, dt)

	if not enemyModule.setTarget(self) then
		-- all players are dead, so enemy will do nothing
		return
	end	
	
	if self.targetId then
		self.targetPosition = go.get_position(self.targetId)
	else
		self.targetPosition = nil
	end
	
	-- RANDOM ACTIONS (invisibility)
	if self.actionTimer > self.random then
		self.random = math.random(5, 10)
		self.actionTimer = 0

		if self.spriteHidden then
			showSprite(self)
		else 
			hideSprite(self)
		end	
	end
	-- END OF RANDOM ACTIONS

	enemyModule.move(self, dt)

	
	self.actionTimer = self.actionTimer + dt
	self.chargeTimer = self.chargeTimer + dt
	self.attackTimer = self.attackTimer + dt
	
	-- DRAW ORDER
	g_applyDrawOrder(go.get_id(), 2)
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("collision_response") then
		if message.own_group == hash("chargeRange") then
			local playerURL = msg.url(nil, message.other_id, "player")
			if go.get(playerURL, "isTargetable") and self.rootDuration <= 0 then
				if self.chargeTimer > 5 and self.targetPosition then
					self.chargeTimer = 0
					
					go.animate("#sprite", "tint.y", go.PLAYBACK_ONCE_FORWARD, 0.1, go.EASING_INOUTQUART, 1, 0, 
					function() 
						if self.rootDuration > 0 or self.stunDuration > 0 then
							go.cancel_animations("#sprite", "tint.y")
						else
							msg.post("#co", "apply_force", { force = self.targetPosition * 30000 * go.get("#co", "mass"), position = go.get_world_position()})
						end
						go.animate("#sprite", "tint.y", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTQUART, 2)
					end)
					
					go.animate("#sprite", "tint.z", go.PLAYBACK_ONCE_FORWARD, 0.1, go.EASING_INOUTQUART, 1, 0, 
					function() 
						go.animate("#sprite", "tint.z", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTQUART, 2)
					end)
					
				end
			end
		elseif message.own_group == hash("enemy") and message.other_group ~= hash("attack") then
			enemyModule.collisionWithEntity(self, message_id, message, sender)
		elseif message.own_group == hash("attackRange") then
			local playerURL = msg.url(nil, message.other_id, "player")
			if go.get(playerURL, "isTargetable") then
				attack(self, message_id, message, sender)
			end
		end
	end

	enemyModule.handleMessage(self, message_id, message, sender)
end
