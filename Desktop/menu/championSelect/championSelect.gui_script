local scalingButton = require "util/scalingButton"
local playersManager = require "managers.playersManager"
local clientsManager = require "managers.clientsManager"
local globals = require "main.globals"

local playerListNode = nil
local playerList = nil

local blackBoxNode = nil

local lockActions = nil

local function buttonPressed(hashedNodeId)

end

local function buttonReleased(hashedNodeId)
	
	if hashedNodeId == hash("Back") then
		-- print("Clicked Back Button")
		lockActions = true
				
		gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		gui.EASING_LINEAR, 1, 0, function() g_goToMainMenu() end)
	elseif hashedNodeId == hash("Start") then
		-- print("Clicked start")
		lockActions = true
		globals.setPause(false)

		g_gameState = g_gameStateEnum.inGame
		g_allowOpenPause()
		
		gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		gui.EASING_LINEAR, 1, 0, function() msg.post("/menu", "disable") end)
	end
end

local function updatePlayerList(players)
	playerList = players

	local output = ""
	if players then
		for i, player in pairs(players) do
			output = output .. player.nick .. ":" .. player.ip
			output = output .. "\n"
		end
	else
		output = "none"
	end
	gui.set_text(playerListNode, output)
	--pprint(playerList)
end

local function start()
	lockActions = false

	-- screen is going from black to white
	gui.set_color(blackBoxNode, vmath.vector4(0,0,0,1))
	gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1)

	msg.post("/TCP_server/go#TCP_server_gui", "championSelect")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	blackBoxNode = gui.get_node("blackBox")
	playerListNode = gui.get_node("playerList")
	
	self.buttonHolder = {
		backButton = scalingButton.create("Back", buttonReleased, buttonPressed),
		startButton = scalingButton.create("Start", buttonReleased, buttonPressed)
	}
end

function final(self)
	
end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable") then
		start(self)
	elseif message_id == hash("disable") then

	elseif message_id == hash("playerUpdate") then
		updatePlayerList(message.players)	
	end
end

function on_input(self, action_id, action)
	if action_id == hash("mouse_left") then
		if lockActions then
			return
		end

		for idx, button in pairs(self.buttonHolder) do
			button.mouseUpdate(action)
		end
	end
end

function on_reload(self)
	
end
