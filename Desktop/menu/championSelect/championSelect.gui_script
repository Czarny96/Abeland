local scalingButton = require "util/scalingButton"
local playersManager = require "managers.playersManager"
local clientsManager = require "managers.clientsManager"
local globals = require "main.globals"

local blackBoxNode = nil

local lockActions = nil

local getNickAndClass = { }
local previousGetNickAndClass = { }

local infoAboutPlayerNick = nil
local infoAboutPlayerClass = nil

local archerNickName = nil
local mageNickName = nil
local knightNickName = nil
local rogueNickName = nil

local function buttonPressed(hashedNodeId)

end

local function StartGame()
	-- print("Clicked start")
	lockActions = true
	globals.setPause(false)

	g_gameState = g_gameStateEnum.inGame
	g_allowOpenPause()

	gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
	gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
	gui.EASING_LINEAR, 1, 0, function() msg.post("/menu", "disable") end)
end

local function buttonReleased(hashedNodeId)
	if hashedNodeId == hash("Back") then
		-- print("Clicked Back Button")
		lockActions = true
				
		gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		gui.EASING_LINEAR, 1, 0, function() g_goToMainMenu() end)
	end
end

local function start()
	lockActions = false

	gui.set_color(blackBoxNode, vmath.vector4(0,0,0,1))
	gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 1)

	msg.post("/TCP_server/go#TCP_server_gui", "championSelect")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	blackBoxNode = gui.get_node("blackBox")

	archerNickName = gui.get_node("archerPlayerName")
	mageNickName = gui.get_node("magePlayerName")
	knightNickName = gui.get_node("knightPlayerName")
	rogueNickName = gui.get_node("roguePlayerName")
	
	self.buttonHolder = {
		backButton = scalingButton.create("Back", buttonReleased, buttonPressed),
	}
end

function final(self)
	
end

function update(self, dt)

end

local function ClearAllNickNames()
	gui.set_text(archerNickName, "")
	gui.set_text(mageNickName, "")
	gui.set_text(rogueNickName, "")
	gui.set_text(knightNickName, "")
end

local function ClearNickName(ip)
	if ip == nil then
		if previousGetNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "archer" then
			gui.set_text(archerNickName, "")
		elseif previousGetNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "mage" then
			gui.set_text(mageNickName, "")
		elseif previousGetNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "rogue" then
			gui.set_text(rogueNickName, "")
		elseif previousGetNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "knight" then
			gui.set_text(knightNickName, "")
		end
	else
		if previousGetNickAndClass[ip].playerClass == "archer" then
			gui.set_text(archerNickName, "")
		elseif previousGetNickAndClass[ip].playerClass == "mage" then
			gui.set_text(mageNickName, "")
		elseif previousGetNickAndClass[ip].playerClass == "rogue" then
			gui.set_text(rogueNickName, "")
		elseif previousGetNickAndClass[ip].playerClass == "knight" then
			gui.set_text(knightNickName, "")
		end
	end
end

local function SetPlayers()
	ClearNickName()
	
	if getNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "archer" then
		gui.set_text(archerNickName, getNickAndClass[infoAboutPlayerClass[1].ip].playerNickname)
	elseif getNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "mage" then
		gui.set_text(mageNickName, getNickAndClass[infoAboutPlayerClass[1].ip].playerNickname)
	elseif getNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "rogue" then
		gui.set_text(rogueNickName, getNickAndClass[infoAboutPlayerClass[1].ip].playerNickname)
	elseif getNickAndClass[infoAboutPlayerClass[1].ip].playerClass == "knight" then
		gui.set_text(knightNickName, getNickAndClass[infoAboutPlayerClass[1].ip].playerNickname)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable") then
		start(self)
	elseif message_id == hash("disable") then

	elseif message_id == hash("startGame") then
		StartGame()
	elseif message_id == hash("classSelect") then
		infoAboutPlayerClass = message
		
		getNickAndClass[message[1].ip] = {
			ip = getNickAndClass[message[1].ip].ip,
			playerNickname = getNickAndClass[message[1].ip].playerNickname,
			playerClass = infoAboutPlayerClass[1].playerClass
		}
		
		SetPlayers()
		
		previousGetNickAndClass[message[1].ip] = {
			ip = getNickAndClass[message[1].ip].ip,
			playerNickname = getNickAndClass[message[1].ip].playerNickname,
			playerClass = infoAboutPlayerClass[1].playerClass
		}
	elseif message_id == hash("nick") then
		infoAboutPlayerNick = message

		getNickAndClass[message[1].ip] = {
			ip = infoAboutPlayerNick[1].ip,
			playerNickname = infoAboutPlayerNick[1].playerNickname
		}
		
		previousGetNickAndClass[message[1].ip] = {
			ip = infoAboutPlayerNick[1].ip,
			playerNickname = infoAboutPlayerNick[1].playerNickname
		}
	end

	if message_id == hash("clearNick") then
		ClearNickName(message.ip)
	end

	if message_id == hash("clearAllNicks") then
		ClearAllNickNames()
	end
end

function on_input(self, action_id, action)
	if action_id == hash("mouse_left") then
		if lockActions then
			return
		end

		for idx, button in pairs(self.buttonHolder) do
			button.mouseUpdate(action)
		end
	end
end

function on_reload(self)
	
end
