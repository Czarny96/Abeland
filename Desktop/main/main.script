require "debugging/debugging"
local globals = require "main.globals"

function init(self)
	msg.post(".", "acquire_input_focus")

	-- disable (don't render and don't update) other menu components
	msg.post("/menu", "disable")
	-- start game with splash screen
	g_goToSplashScreen()
	--msg.post("@system:", "toggle_profile")
end

-- GAME STATE GLOBAL FUNCTIONS AND VARIABLES:
g_gameStateEnum = {
	splashScreen = {},
	mainMenu = {},
	settings = {},
	championSelect = {},
	inGame = {},
	gameOver = {},
	pause = {}
}

g_gameState = g_gameStateEnum.splashScreen

g_inGameMenuVisible = false

g_allowOpenPauseVariable = false

function g_goToSplashScreen()
	print("Entering splash screen")
	g_gameState = g_gameStateEnum.splashScreen
	msg.post("/menu", "disable")
	msg.post("/menu#splashScreen", "enable")
end

function g_goToMainMenu()
	print("Entering main menu")
	g_gameState = g_gameStateEnum.mainMenu
	msg.post("/menu", "disable")
	msg.post("/menu#mainMenu", "enable")
end

function g_goToSettings()
	print("Entering settings")
	g_gameState = g_gameStateEnum.settings
end

function g_goToChampionSelect()
	print("Entering champion select")
	g_gameState = g_gameStateEnum.championSelect
	msg.post("/menu", "disable")
	msg.post("/menu#championSelect", "enable")
end

function g_goToGameOverScreen()
	print("Entering game over screen")
	g_gameState = g_gameStateEnum.gameOver
	msg.post("/menu", "disable")
	msg.post("/menu#gameOver", "enable")
end

function g_goToPauseScreen()
	print("Entering pause screen")
	g_gameState = g_gameStateEnum.pause
	msg.post("/menu", "disable")
	msg.post("/menu#pauseScreen", "enable")
end

function g_showInGameMenu()
	print("Show in game menu")
	g_inGameMenuVisible = true
end

function g_hideInGameMenu()
	print("Hide in game menu")
	g_inGameMenuVisible = false
end

function g_allowOpenPause()
	g_allowOpenPauseVariable = true
end

function g_doNotAllowOpenPause()
	g_allowOpenPauseVariable = false
end

function g_setUpInGameEnum()
	g_gameState = g_gameStateEnum.inGame
end

-- DRAW ORDER GLOBAL FUNCTIONS

-- draw order is based on current 'y' position of game object.
-- Group 1 - z = [0, 0.1]	-- THINGS ON GROUND
-- Group 2 - z = [0.1, 0.2] -- PLAYERS
-- Group 3 - z = [0.2, 0.3] -- PROJECTILES
-- etc.

local drawOrderDenominator = 10800.0 -- gameHeight * 10.0

-- place this function in every game object:
-- g_applyDrawOrder(go.get_id(), 2)
function g_applyDrawOrder(gameObjectUrl, group)
	
	local _pos = go.get_position(gameObjectUrl)
	local maxZ = group * 0.1
	
	_pos.z = maxZ - _pos.y / g_drawOrderDenominator
	
	if _pos.z < maxZ - 0.1 then 
		_pos.z = maxZ - 0.1
		
	elseif _pos.z > maxZ then 
		_pos.z = maxZ
		
	end
	
	go.set_position(_pos, gameObjectUrl)
	
end

-- END OF GAME STATE FUNCTIONS AND VARIABLES

function on_input(self, action_id, action)
	if action_id == hash("esc") and action.pressed and g_allowOpenPauseVariable == true and g_gameState ~= g_gameStateEnum.pause then
		globals.setPause(true)
		msg.post("/menu", "disable")
		g_goToPauseScreen()
	elseif action_id == hash("esc") and action.pressed and g_gameState == g_gameStateEnum.pause then
		--msg.post("/menu", "disable")
		msg.post("/menu#pauseScreen", "resumeGame")
	elseif action_id == hash("esc") and action.pressed then
		os.exit()
	end

	if action_id == hash("read-file") and action.pressed then
		ReadFiles("log.txt")
	end
	
end

function on_message(self, message_id, message, sender)
	
end
