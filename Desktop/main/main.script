require "debugging/debugging"
local enemyManager = require "managers.enemyManager"
local globals = require "main.globals"

function init(self)
	msg.post(".", "acquire_input_focus")

	enemyManager.initializeEnemies(2)

	-- disable (don't render and don't update) other menu components
	msg.post("/menu", "disable")
	
	-- start game with splash screen
	g_goToSplashScreen()
	msg.post("@system:", "toggle_profile")
end

-- GAME STATE GLOBAL FUNCTIONS AND VARIABLES:
g_gameStateEnum = {
	splashScreen = {},
	mainMenu = {},
	settings = {},
	championSelect = {},
	inGame = {},
	gameOver = {},
	pause = {}
}

g_gameState = g_gameStateEnum.splashScreen

g_inGameMenuVisible = false

g_allowOpenPauseVariable = false

function g_goToSplashScreen()
	print("Entering splash screen")
	g_gameState = g_gameStateEnum.splashScreen
	msg.post("/menu", "disable")
	msg.post("/menu#splashScreen", "enable")
end

function g_goToMainMenu()
	print("Entering main menu")
	g_gameState = g_gameStateEnum.mainMenu
	msg.post("/menu", "disable")
	msg.post("/menu#mainMenu", "enable")
end

function g_goToSettings()
	print("Entering settings")
	g_gameState = g_gameStateEnum.settings
end

function g_goToChampionSelect()
	print("Entering champion select")
	g_gameState = g_gameStateEnum.championSelect
	msg.post("/menu", "disable")
	msg.post("/menu#championSelect", "enable")
end

function g_goToGameOverScreen()
	print("Entering game over screen")
	g_gameState = g_gameStateEnum.gameOver
	msg.post("/menu", "disable")
	msg.post("/menu#gameOver", "enable")
end

function g_goToPauseScreen()
	print("Entering pause screen")
	g_gameState = g_gameStateEnum.pause
	msg.post("/menu", "disable")
	msg.post("/menu#pauseScreen", "enable")
end

function g_showInGameMenu()
	print("Show in game menu")
	g_inGameMenuVisible = true
end

function g_hideInGameMenu()
	print("Hide in game menu")
	g_inGameMenuVisible = false
end

function g_allowOpenPause()
	g_allowOpenPauseVariable = true
end

function g_doNotAllowOpenPause()
	g_allowOpenPauseVariable = false
end

function g_setUpInGameEnum()
	g_gameState = g_gameStateEnum.inGame
end

-- END OF GAME STATE FUNCTIONS AND VARIABLES

function on_input(self, action_id, action)
	if action_id == hash("esc") and action.pressed and g_allowOpenPauseVariable == true and g_gameState ~= g_gameStateEnum.pause then
		msg.post("/menu", "disable")
		globals.setPause(true)
		g_goToPauseScreen()
	elseif action_id == hash("esc") and action.pressed and g_gameState == g_gameStateEnum.pause then
		globals.setPause(false)
		g_allowOpenPause()
		g_setUpInGameEnum()
		msg.post("/menu", "disable")
	elseif action_id == hash("esc") and action.pressed then
		os.exit()
	end

	if action_id == hash("read-file") and action.pressed then
		ReadFiles("log.txt")
	end
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("createKnight") then
		factory.create("#knightFactory", vmath.vector3(render.get_width()/2, render.get_height()/2,0), nil, nil)
	elseif message_id == hash("createArcher") then
		factory.create("#archerFactory", vmath.vector3(render.get_width()/2, render.get_height()/2,0), nil, nil)
	elseif message_id == hash("createMage") then
		factory.create("#mageFactory", vmath.vector3(render.get_width()/2, render.get_height()/2,0), nil, nil)
	elseif message_id == hash("createRogue") then
		factory.create("#rogueFactory", vmath.vector3(render.get_width()/2, render.get_height()/2,0), nil, nil)
	end
end
