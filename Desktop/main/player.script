function init(self)
	msg.post(".", "acquire_input_focus")
	self.inputCollection = { up = false, down = false, left = false, right = false, space = false }

	self.movingFlag = false
	self.movingSpeed = 150
	self.movingDir = vmath.vector3(0, 0, 0)

	self.firingFlag = false
	self.shootingDelay = 0.25
	self.shootingDir = vmath.vector3(0, 1, 0)
end

function update(self, dt)
	if self.inputCollection.up then
		self.movingDir.y = 1
	end
	if self.inputCollection.down then
		self.movingDir.y = -1
	end
	if self.inputCollection.down and self.inputCollection.up then
		self.movingDir.y = 0
	end

	if self.inputCollection.left then
		self.movingDir.x = -1
	end
	if self.inputCollection.right then
		self.movingDir.x = 1
	end
	if self.inputCollection.left and self.inputCollection.right then
		self.movingDir.x = 0
	end

	if self.inputCollection.up or self.inputCollection.down or self.inputCollection.left or self.inputCollection.right 
	and not(self.inputCollection.up and self.inputCollection.down and self.inputCollection.left and self.inputCollection.right) then
		self.movingFlag = true
	else
		self.movingFlag = false
	end

	if self.movingFlag then
		local l_position = go.get_position()
		local l_movingDir = vmath.vector3(self.movingDir.x, self.movingDir.y, 0)
		l_position = l_position + l_movingDir * self.movingSpeed * dt
		go.set_position(l_position)
	end

	if self.inputCollection.space then
		self.firingFlag = true

		if not (self.movingDir.x == 0 and self.movingDir.y == 0) then
			self.shootingDir = vmath.normalize(self.movingDir)
		end
	end

	if self.shootingDelay > 0  then
		self.shootingDelay = self.shootingDelay - dt
	end
	
	if self.firingFlag and self.shootingDelay <= 0 then
		local l_angle = math.atan2(self.shootingDir.y, self.shootingDir.x)
		local l_rotation = vmath.quat_rotation_z(l_angle)
		local l_props = { projectileDir = self.shootingDir }
		factory.create("#rangeAttackFactory", nil, l_rotation, l_props)
		self.shootingDelay = 0.25
	end

	self.inputCollection = { up = false, down = false, left = false, right = false, space = false }
	self.movingFlag = false
	self.movingDir = vmath.vector3(0, 0, 0)
	self.firingFlag = false
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.inputCollection.up = true
	end
	if action_id == hash("down") then
		self.inputCollection.down = true
	end
	if action_id == hash("left") then
		self.inputCollection.left = true
	end
	if action_id == hash("right") then
		self.inputCollection.right = true
	end
	if action_id == hash("space") then
		self.inputCollection.space = true
	end
end
