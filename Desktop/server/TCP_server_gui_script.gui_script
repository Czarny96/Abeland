local tcpServer = require "defnet.tcp_server"
local p2pDiscovery = require "defnet.p2p_discovery"
local playersManager = require "managers.playersManager"
local clientsManager = require "managers.clientsManager"
local globals = require "main.globals"
local translationLayer = require "server.TranslationLayer"

local sessionGenerator = require "server.sessionGenerator"


local TCP_SERVER_PORT = 5555
local PORT = 50000

local dtPassed = 0
--Proxy to access server in functions other than self
local serverHandler = nil
local currentSession = nil
local startP2P = false


local function sendMessageToAllActivePlayers(mess)
	for ip,client in pairs(clientsManager.returnActiveClients()) do
		serverHandler.send(mess.."\n\r", client)
	end
end

function sendPauseValue(pauseStatus)
	sendMessageToAllActivePlayers("P;"..tostring(pauseStatus)..";")
end

local function beginClientsGame(ip,client)
	local playerClass = clientsManager.getPlayerClass(ip)
	currentSession.insertPlayerToQue(ip, playerClass)
	print(translationLayer.buildCDFrame(globals.getCD(playerClass)))
	serverHandler.send(translationLayer.buildCDFrame(globals.getCD(playerClass)), client)
	serverHandler.send("StartGame".."\n\r", client)

	-- send another StartGame after 0.5s just in case someone wasn't connected
	timer.delay(0.5, false, function(self, handle, time_elapsed)
		print("Sending second StartGame frame", os.date())
		serverHandler.send("StartGame".."\n\r", client)
	end)
end

function createSession()
	if currentSession == nil then
		currentSession = sessionGenerator.create()
		currentSession.start()
		
		for ip, client in pairs(clientsManager.returnAllClients()) do
			beginClientsGame(ip, client)
		end
	end
end


local function routeFrameToRespFunc(frame,ip, client)
	local frameId = string.sub(frame,1,1)

	if frameId == "M" and currentSession ~=nil then 
		clientsManager.translateDataToPlayer(frame, ip)
	elseif frameId == "N" then
		clientsManager.addNickToPlayer(frame, ip)
		clientsManager.sendNickToMenu(ip)
	elseif frameId == "C" then 
		if clientsManager.tryToLockPlayerClass(frame, ip) then
			serverHandler.send(frame.."\n\r", client)
			clientsManager.sendClassToMenu(ip)
		end
	elseif frameId == "G" then
		clientsManager.setPlayerReadines(ip, true)
		if currentSession~=nil then
			beginClientsGame(ip, client)
		elseif clientsManager.areAllPlayersReady() and currentSession==nil then
			createSession()
		end
		
	end
	
end


local function on_data(data, ip, port, client)
	if string.sub(data,1,1)=="M" then
		clientsManager.setControllerSendFrameFlag(ip, true)
		clientsManager.addFrameToTheClient(ip, data)
	end
	
	clientsManager.resetPlayerInactivityTimeCounter(ip)
	
	
	if  not clientsManager.isPlayerActive(ip) then
		clientsManager.activatePlayer(ip)
	end
	
	routeFrameToRespFunc(data,ip,client)
end 

local function on_client_connected(ip, port, client) 
	clientsManager.addPlayer(ip, client)
end

local function endGame()
	sendMessageToAllActivePlayers("AllDead")
	currentSession.setGameOverFlag(1)
end

local function on_client_disconnected(ip, port, client)
	--TODO: add function, to remove data from menu
	if currentSession ~= nil then 
		currentSession.removePlayerInQue(ip)
	end
	clientsManager.clearNickFromMenu(ip)
	clientsManager.removePlayer(ip)

	if not clientsManager.isAnyPlayer() and currentSession~=nil then
		endGame()
	end
end

function init(self)
	server = tcpServer.create(TCP_SERVER_PORT, on_data, on_client_connected, on_client_disconnected)
	self.server = server
	serverHandler = self.server
	self.server.start()

	-- broadcast init
	self.p2p = p2pDiscovery.create(PORT)
	self.p2p.broadcast("findme")
	print("Server Initialized")
end

function final(self)
	if self.server then
		self.server.stop()
	end
end

function update(self, dt)
	-- Add update code here
	

	if startP2P == true then 
		self.p2p.update(dt)
	end
	
	if not globals.getPause() then
		if  dtPassed > 0.016  then
			clientsManager.setALLControllerSendFrameFlag(false)
			for ip,client in pairs(clientsManager.returnAllClients()) do

				if currentSession ~= nil  and not currentSession.isPlayerInQue(ip) and not clientsManager.isPlayerDead(ip) then

					self.server.send("btn_data\n\r", client)
					clientsManager.incrementPlayerInactivityTimeCounterByDT(ip,dtPassed)

					if not clientsManager.getControllerSendFrameFlag(ip) and currentSession~=nil then
						routeFrameToRespFunc(clientsManager.getClientLastFrame(ip), ip, client)
					end
--[[
					if clientsManager.getPlayerInactivityTimeCounter(ip) > 15 and clientsManager.isPlayerActive(ip) then

						clientsManager.desactivatePlayer(ip)
						
					elseif clientsManager.getPlayerInactivityTimeCounter(ip) > 20 and not clientsManager.isPlayerActive(ip) then

						self.server.remove_client(client)
					end--]]
				end
			end
			dtPassed = 0
		elseif currentSession~=nil then
			dtPassed = dtPassed + dt
		end
	end
	
	if self.server then
		self.server.update()	
	end
	
	if currentSession ~= nil then
		currentSession.update() 
		if currentSession.isGameOver()  then
			currentSession = nil
			startP2P = false
		end
		
	end
end

function on_message(self, message_id, message, sender)
	if  message_id == hash("reset") then
		
		sendMessageToAllActivePlayers("Reset")
		clientsManager.clearNicksFromMenu()
		clientsManager.resetPlayersToDefault()
		
	elseif  message_id == hash("championSelect") then
		startP2P = true
	elseif  message_id == hash("mainMenu") then
		startP2P = false
		for ip,client in pairs(clientsManager.returnAllClients()) do
			self.server.remove_client(client)
		end
	elseif  message_id == hash("playersAreDead") then
		endGame()
	elseif  message_id == hash("waveWasOver") then
		currentSession.setPlayersFromQue()
		currentSession.ressurectPlayers()
	elseif  message_id == hash("playerDied") then
		print("Killing Player: ".. message.playerID)
		clientsManager.setIsPlayerDead(clientsManager.getPlayerIpFromID(message.playerID), true)
		serverHandler.send("EndGame".."\n\r", clientsManager.getPlayerClientFromID(message.playerID))
	elseif  message_id == hash("playerRessurected") then
		local playerClient = clientsManager.getPlayerClientFromID(message.playerID)
		print("Resurecting Player: ".. message.playerID)
		clientsManager.setIsPlayerDead(clientsManager.getPlayerIpFromID(message.playerID), false)
		clientsManager.resetPlayerInactivityTimeCounter()
		serverHandler.send("StartGame".."\n\r", playerClient)
	end
	

end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
