local tcpServer = require "defnet.tcp_server"
local p2pDiscovery = require "defnet.p2p_discovery"
local translationLayer = require "server.TranslationLayer"

local TCP_SERVER_PORT = 5555
local PORT = 50000

-- temp, test only
local clientsTable = {}
local createdPlayersTable = {}
local currentPlayers = 0
local dtPassed = 0

local function on_data(data, ip, port, client)
	print("TCP server received data '" .. data .. "' from " .. ip .. ":" .. port)
	translationLayer.translateFrameToPlayer(data, createdPlayersTable[ip])
end

local function on_client_connected(ip, port, client)
	print("Client connected from " .. ip .. ":" .. port)
	
	pprint(client)

	if currentPlayers < 4 then
		clientsTable[ip] = client
		currentPlayers = currentPlayers + 1
		
		-- WARNING: Temporally fixed to call one factory, until mechanism to chose class at the controller side is avaible
		createdPlayersTable[ip] = translationLayer.createPlayerObject("go#knightFactory", vmath.vector3(147, 297, 0))
	else
		print("To many clients, cannot connected another one")
	end
	
end

local function on_client_disconnected(ip, port, client)
	print("Client ".. ip.." Disconnected")
	currentPlayers = currentPlayers - 1
	clientsTable[ip] =  nil
	--TODO: decide what to do when player disconnects
	translationLayer.RemovePlayerObject(createdPlayersTable[ip])
	createdPlayersTable[ip] = nil
end

function init(self)
	-- Add initialization code here
	msg.post(".", "acquire_input_focus")
	-- tcp server init
	self.server = tcpServer.create(TCP_SERVER_PORT, on_data, on_client_connected, on_client_disconnected)
	self.server.start()
	-- broadcast init
	self.p2p = p2pDiscovery.create(PORT)

	self.p2p.broadcast("findme")
	print("Server Initialized")
end

function final(self)
	-- Add finalization code here
	msg.post(".", "release_input_focus")
	if self.server then
		self.server.stop()
	end
end

function update(self, dt)
	-- Add update code here
	self.p2p.update()
	
	--TODO: adjust clocking for optimal user experience
	if  currentPlayers > 0 and dtPassed > 0.01 then
		for ip,client in pairs(clientsTable) do
			self.server.send("btn_data\n\r", client)
		end
		dtPassed = 0
	else
		dtPassed = dtPassed + dt
	end
	
	if self.server then
		self.server.update()	
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
