local tcpServer = require "defnet.tcp_server"
local p2pDiscovery = require "defnet.p2p_discovery"

local clientsManager = require "managers.clientsManager"
local playersManager = require "managers.playersManager"

local sessionGenerator = require "server.sessionGenerator"

local TCP_SERVER_PORT = 5555
local PORT = 50000

local dtPassed = 0
--Proxy to access server in functions other than self
local serverHandler = nil
local currentSession = nil

function createSession()
	if currentSession == nil then
		currentSession = sessionGenerator.create()
		currentSession.start()
		sendMessageToAllActivePlayers("StartGame")
	end
end

local function msgActivePlayersChange()
	playersManager.setActivePlayersIDs(clientsManager.returnActivePlayersIDs())
end

local function routeFrameToRespFunc(frame,ip)
	local frameId = string.sub(data,1,1)

	if frameId == "M" then 
		clientsManager.translateDataToPlayer(data, ip)
	elseif frameId == "N" then 
		clientsManager.addNickToPlayer(data, ip)
		clientsManager.sendNickToMenu(ip)
	elseif frameId == "C" then 
		if clientsManager.tryToLockPlayerClass(data, ip) then
			serverHandler.send(frame, client)
			clientsManager.sendClassToMenu(ip)
		end
	elseif frameId == "G" then
		clientsManager.setPlayerReadines(ip, true)
		if clientsManager.areAllPlayersReady() then
			createSession()
		end
	end
	
end


local function on_data(data, ip, port, client)
	clientsManager.resetPlayerInactivityTimeCounter(ip)
	
	if  not clientsManager.isPlayerActive(ip) then
		clientsManager.activatePlayer(ip)
		msgActivePlayersChange()
	end
	
	routeFrameToRespFunc(data,ip)
end 

local function on_client_connected(ip, port, client) 
	clientsManager.addPlayer(ip, client, factoryObjectID)
	msgActivePlayersChange()
end

local function on_client_disconnected(ip, port, client)
	--TODO: add function, to remove data from menu
	clientsManager.removePlayer(ip)
	msgActivePlayersChange()
end

function init(self)
	server = tcpServer.create(TCP_SERVER_PORT, on_data, on_client_connected, on_client_disconnected)
	self.server = server
	serverHandler = self.server
	self.server.start()

	-- broadcast init
	self.p2p = p2pDiscovery.create(PORT)
	self.p2p.broadcast("findme")
	print("Server Initialized")
end

function final(self)
	if self.server then
		self.server.stop()
	end
end

local function sendMessageToAllActivePlayers(mess)
	for ip,client in pairs(clientsManager.returnActiveClients()) do
		serverHandler.send(mess.."\n\r", client)
	end
end

function update(self, dt)
	-- Add update code here
	
	--TODO: start updated when inside champion select
	self.p2p.update(dt)
	
	--TODO: adjust clocking for optimal user experience
	if  clientsManager.isAnyPlayer() and dtPassed > 0.016 then
		for ip,client in pairs(clientsManager.returnActiveClients()) do
			self.server.send("btn_data\n\r", client)
			clientsManager.incrementPlayerInactivityTimeCounterByDT(ip,dt)
			if clientsManager.getPlayerInactivityTimeCounter(ip) > 1 and clientsManager.isPlayerActive(ip) then
				clientsManager.desactivatePlayer(ip)
				msgActivePlayersChange()
			end
		end
		dtPassed = 0
	else
		dtPassed = dtPassed + dt
	end
	
	if self.server then
		self.server.update()	
	end
	
	if currentSession ~= nil then
		currentSession.update() 
		if currentSession.isGameOver()  then
			sendMessageToAllActivePlayers("EndGame")
			currentSession = nil
		end
		
	end
end

function on_message(self, message_id, message, sender)
	if  message_id == hash("reset") then
		if self.currentSession then
			sendMessageToAllActivePlayers("Reset")
			clientsManager.resetPlayersToDefault()
			self.currentSession.setGameOverFlag(1)

		end
	end]]
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
