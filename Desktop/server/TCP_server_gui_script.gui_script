local tcpServer = require "defnet.tcp_server"
local p2pDiscovery = require "defnet.p2p_discovery"

local clientsManager = require "managers.clientsManager"
local playersManager = require "managers.playersManager"

local sessionGenerator = require "server.sessionGenerator"

local TCP_SERVER_PORT = 5555
local PORT = 50000

local dtPassed = 0

local function msgActivePlayersChange()
	msg.post("/menu#championSelect", "playerUpdate", {players=clientsManager.generatePlayersList()})
	playersManager.setActivePlayersIDs(clientsManager.returnActivePlayersIDs())
end

local function on_data(data, ip, port, client)
	--potential choke point
	clientsManager.resetPlayerInactivityTimeCounter(ip)
	
	if  not clientsManager.isPlayerActive(ip) then
		clientsManager.activatePlayer(ip)
		msgActivePlayersChange()
	end
	
	if string.sub(data,1,1) == "M" then 
		clientsManager.translateDataToPlayer(data, ip)
	elseif string.sub(data,1,1) == "N" then 
		clientsManager.addNickToPlayer(data, ip)
	end
end 

local function on_client_connected(ip, port, client) 
	clientsManager.addPlayer(ip, client, factoryObjectID)
	msgActivePlayersChange()
end

local function on_client_disconnected(ip, port, client)
	clientsManager.removePlayer(ip)
	msgActivePlayersChange()
end

function init(self)
	-- DEBUG: profiler init
	-- msg.post("@system:", "toggle_profile")
	-- tcp server init
	server = tcpServer.create(TCP_SERVER_PORT, on_data, on_client_connected, on_client_disconnected)
	self.server = server
	self.server.start()

	-- broadcast init
	self.p2p = p2pDiscovery.create(PORT)
	self.p2p.broadcast("findme")
	print("Server Initialized")
end

function final(self)
	if self.server then
		self.server.stop()
	end
end

function update(self, dt)
	-- Add update code here
	self.p2p.update(dt)
	
	--TODO: adjust clocking for optimal user experience
	if  clientsManager.isAnyPlayer() and dtPassed > 0.016 then
		for ip,client in pairs(clientsManager.returnActiveClients()) do
			self.server.send("btn_data\n\r", client)
			clientsManager.incrementPlayerInactivityTimeCounterByDT(ip,dt)
			if clientsManager.getPlayerInactivityTimeCounter(ip) > 1 and clientsManager.isPlayerActive(ip) then
				clientsManager.desactivatePlayer(ip)
				msgActivePlayersChange()
			end
		end
		dtPassed = 0
	else
		dtPassed = dtPassed + dt
	end
	
	if self.server then
		self.server.update()	
	end

	if self.currentSession then
		self.currentSession = self.currentSession.update()
	end
end

function on_message(self, message_id, message, sender)
	--[[if message_id == hash("startGame") then
		if not self.currentSession then
			self.currentSession = sessionGenerator.create()
			self.currentSession.start()
		end
	end]]
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
