--ARCHER

go.property("position", vmath.vector3(0, 0, 0))
go.property("movingDir", vmath.vector3(0, 0, 0))

--Class Properties
go.property("health", 100)
go.property("movingSpeed", 150)

--Flags
go.property("isKilled", false)
go.property("isVulnerable", true)

local globals = require "main.globals"
local playersManager = require "managers.playersManager"

function init(self)
	label.set_text("#label_hp", self.health)
	local startPos = go.get_position()	
	self.position = vmath.vector3(startPos.x, startPos.y, 0.99)
	go.set_position(self.position)
	--Local Properties
	self.isMoving = false
	--Local Colliders
	self.wallsCollider = {top = false, bottom = false,left = false,right = false}
	--Local Timers
	self.killedTimer = 0
	self.nonVulnerableTimer = 0
	self.nonOperativeTimer = 0
end

local function updateAnimation(self)
	if self.movingDir.x < -0.3 then
		if self.movingDir.y > 0.3 then
			msg.post("#sprite", "play_animation", {id = hash("player_up_left")})
		elseif self.movingDir.y < -0.3 then
			msg.post("#sprite", "play_animation", {id = hash("player_down_left")})
		else
			msg.post("#sprite", "play_animation", {id = hash("player_left")})
		end
	elseif self.movingDir.x > 0.3 then
		if self.movingDir.y > 0.3 then
			msg.post("#sprite", "play_animation", {id = hash("player_up_right")})
		elseif self.movingDir.y < -0.3 then
			msg.post("#sprite", "play_animation", {id = hash("player_down_right")})
		else
			msg.post("#sprite", "play_animation", {id = hash("player_right")})
		end
	elseif self.movingDir.y > 0.3  then
		msg.post("#sprite", "play_animation", {id = hash("player_up")})
	elseif self.movingDir.y < -0.3  then
		msg.post("#sprite", "play_animation", {id = hash("player_down")})
	end
end

function update(self, dt)
	if playersManager.getActivePlayersIDs() == 0 and g_gameState == g_gameStateEnum.inGame then
		g_goToGameOverScreen()
	end

	--Check if game is paused
	--Check if player is dead
	if globals.getPause() or self.isKilled then
		return
	end

	--Death
	if self.health <= 0 then
		if not self.isKilled then
			msg.post("#sprite", "play_animation", {id = hash("player_killed")})
			msg.post("#death_sound", "play_sound", {gain = 0.5})
			self.killedTimer = 10
			go.set_position(vmath.vector3(self.position.x, self.position.y, -0.97))
			self.isKilled = true
		else
			self.killedTimer = self.killedTimer - dt
			if self.killedTimer <= 0 then
				go.delete()
			end
		end
	else
		--Collisions with arena walls
		if (self.wallsCollider.top and self.movingDir.y > 0) or (self.wallsCollider.bottom and self.movingDir.y < 0) then
			self.movingDir.y = 0
		end
		if (self.wallsCollider.left and self.movingDir.x < 0) or (self.wallsCollider.right and self.movingDir.x > 0) then
			self.movingDir.x = 0
		end

		--Movement
		if self.isMoving then
			local playerPos = go.get_position()
			local movingDir = vmath.vector3(self.movingDir.x, self.movingDir.y,0)
			playerPos = playerPos + self.movingDir * self.movingSpeed * dt
			go.set_position(playerPos)
			go.set("#player", "position", go.get_position())
			updateAnimation(self)
		end
	end

	--Vulnerability flag
	if self.nonVulnerableTimer <= 0 then
		self.isVulnerable = true
	end
	--Collider flags
	self.wallsCollider.top = false
	self.wallsCollider.bottom = false
	self.wallsCollider.left = false
	self.wallsCollider.right = false

	--Timers
	self.nonVulnerableTimer = self.nonVulnerableTimer - dt
	self.nonOperativeTimer = self.nonOperativeTimer - dt
end

function on_message(self, message_id, message, sender)

	if self.isKilled or self.nonOperativeTimer > 0 then
		print("DEAD")
		return
	end

	--Movement
	if message_id == hash("move") then
		self.movingDir.x = message.x
		self.movingDir.y = message.y
		if self.movingDir.x ~= 0 or self.movingDir.y ~= 0 then
			self.isMoving = true
		else
			self.isMoving = false
		end		

		--Invulnerability (all enemy interactions put here)
	elseif self.isVulnerable then
		--Got Hit
		if message_id == hash("hit") then
			self.health = self.health - message.dmg
			label.set_text("#label_hp", self.health)
			self.nonVulnerableTimer = 0.5
			self.isVulnerable = false
		end

		--Kill
	elseif message_id == hash("kill") then
		go.delete()

		--AFK
	elseif message_id == hash("desactivate") then
		sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 0.33))
		self.isVulnerable = false
		self.nonVulnerableTimer = 50

		--Activate if player came back
	elseif message_id == hash("activate") then
		self.nonVulnerableTimer = 50
		self.isVulnerable = false
		self.nonOperativeTimer = 2
		sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 1))
		msg.post("#sprite", "play_animation", {id = hash("player_afk")})

		--Colliders
	end
	if message_id == hash("contact_point_response") then	
		--Walls
		print("MESS:",message_id, message_group)
		if message.group == hash("walls") or message.group == hash("walls") then
			if sender.fragment == hash("wallsTopCollider") then
				self.wallsCollider.top = true
			elseif sender.fragment == hash("wallsBottomCollider") then
				self.wallsCollider.bottom = true
			end

			if sender.fragment == hash("wallsLeftCollider") then
				self.wallsCollider.left = true
			elseif sender.fragment == hash("wallsRightCollider") then
				self.wallsCollider.right = true
			end
		end

		return
	end

	if message_id == hash("start") then
		go.set_position(go.get_position("main:/spawnPoints/spawn_archer"))
	elseif message_id == hash("stop") then
		go.set_position(go.get_position("main:/spawnPoints/players_room") + vmath.vector3(-128,0,0))
	end
end