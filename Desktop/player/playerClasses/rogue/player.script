--ROGUE

go.property("movingDir", vmath.vector3(0, 0, 0))
go.property("position", vmath.vector3(0, 0, 0))

--Class Properties
go.property("health", 60)
go.property("movingSpeed", 210)

--Flags
go.property("isKilled", false)
go.property("isVulnerable", true)

--Timers
go.property("killedTimer", 0)
go.property("nonVulnerableTimer", 0)
go.property("nonOperativeTimer", 0)

--Local Properties
go.property("isMoving", false)

--Local Colliders
go.property("wallsColliderTop", false)
go.property("wallsColliderBottom", false)
go.property("wallsColliderLeft", false)
go.property("wallsColliderRight", false)


local globals = require "main.globals"
local playersManager = require "managers.playersManager"
local playerModule = require "player.playerModule"

function init(self)
	playerModule.init()
end

function update(self, dt)
	--Menu
	if playersManager.getActivePlayersIDs() == 0 and g_gameState == g_gameStateEnum.inGame then
		g_goToGameOverScreen()
	end

	--Pause and dead body
	if globals.getPause() or self.isKilled then
		return
	end

	--Death
	if self.health <= 0 then
		playerModule.death(dt)
	else
		--Collisions with arena walls
		playerModule.manageCollisions()

		--Movement
		if self.isMoving then
			playerModule.move(self.movingDir, dt)
		end
	end
	playerModule.manageFlagsAndTimers(dt)
end

function on_message(self, message_id, message, sender)
	playerModule.messages(message_id, message, sender)
end