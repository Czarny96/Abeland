--MAGE
go.property("projectileDir", vmath.vector3())
go.property("range", 700)
go.property("speed", 250)
go.property("damage", 25)

local globals = require "main.globals"

function init(self)
	self.enemiesHit = {}
	self.isExploded = false
	self.projectilelife = self.range / self.speed
	msg.post("#area_triggerCollider", "disable")
end

function update(self, dt)
	if not self.isExploded then
		go.set_position(go.get_position() + self.projectileDir * self.speed * dt)
	end

	if self.projectilelife <= 0 then
		if self.isExploded then
			go.delete()
		else
			self.isExploded = true
			self.projectilelife = 1
			msg.post("#triggerCollider", "disable")
			msg.post("#area_triggerCollider", "enable")
			msg.post("#sprite", "play_animation", {id = hash("player_attack_basic_area")})
		end
	else
		self.projectilelife = self.projectilelife - dt
	end 

	-- DRAW ORDER
	if self.isExploded then 
		g_applyDrawOrder(go.get_id(), 5) 
	else
		g_applyDrawOrder(go.get_id(), 2)
	end

end

function on_message(self, message_id, message, sender)
	if globals.getPause() then
		return
	end
	--Destroy on hit
	if message_id == hash("collision_response") then
		if message.group == hash("enemy") then
			if not self.isExploded then
				self.isExploded = true
				self.projectilelife = 1
				msg.post("#triggerCollider", "disable")
				msg.post("#area_triggerCollider", "enable")
				msg.post("#sprite", "play_animation", {id = hash("player_attack_basic_area")})
			else
				local url = msg.url(nil, message.other_id, "enemy")
				msg.post(url, "knockback", {pos = go.get_position()})
				for i, enemy in pairs(self.enemiesHit) do
					if enemy == message.other_id then
						return
					end
				end
				
				msg.post(url, "hit",{type = hash("plain"), damage = self.damage})

				table.insert(self.enemiesHit, message.other_id)
			end
		else
			go.delete()
		end
	end
end