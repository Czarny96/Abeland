local scalingButton = require "util/scalingButton"

local usernameTextNode = nil
local textFieldNode = nil
local textFieldFocused = false

local blackBoxNode = nil

local lockActions = nil

local function buttonPressed(hashedNodeId)

end

local function buttonReleased(hashedNodeId)
	if hashedNodeId == hash("Back") then
		print("Clicked back")

		gui.hide_keyboard()

		g_showConfirmationWindow()
		--gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		--gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		--	gui.EASING_LINEAR, 0.5, 0, function() msg.post("/go#client", "disconnect") end)
		
	elseif hashedNodeId == hash("Start") then

		-- user didn't enter his username so punish him
		if g_username == "" then
			g_showUsernameFailureWindow()
			return
		end
		
		lockActions = true

		gui.hide_keyboard()
		gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
			gui.EASING_LINEAR, 0.5, 0, function() g_goToChampionSelect() end)
	end
end

local function start(self)
	lockActions = false

	-- reset text field
	textFieldFocused = false
	gui.set_color(textFieldNode, vmath.vector4(1.0, 1.0, 1.0, 1.0))
	gui.set_text(usernameTextNode, g_username)
	
	-- screen is going from black to white
	gui.set_color(blackBoxNode, vmath.vector4(0,0,0,1))
	gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 0.5)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	blackBoxNode = gui.get_node("blackBox")
	usernameTextNode = gui.get_node("usernameText")
	textFieldNode = gui.get_node("textField")
	
	self.buttonHolder = {
		backButton = scalingButton.create("Back", 0, buttonReleased, buttonPressed),
		startButton = scalingButton.create("Start", 0, buttonReleased, buttonPressed)
	}
end

function final(self)
	
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable") then
		start(self)
	elseif message_id == hash("disable") then
		
	end
end

function on_input(self, action_id, action)
	if lockActions then
		return 
	end
	if action_id == hash("mouse_left") then

		-- BUTTONS
		self.buttonHolder.backButton.mouseUpdate(action)
		self.buttonHolder.startButton.mouseUpdate(action)
		-- END OF BUTTONS
		
		if gui.pick_node(textFieldNode, action.x, action.y) then
			
			if action.pressed then
				textFieldFocused = true
				gui.set_color(textFieldNode, vmath.vector4(0.5, 0.5, 0.5, 1.0))
				gui.show_keyboard(gui.KEYBOARD_TYPE_PASSWORD, false)
			end
			
		else
			
			if textFieldFocused then
				msg.post("/go#client", "sendUsername")
			end
			
			textFieldFocused = false
			gui.set_color(textFieldNode, vmath.vector4(1.0, 1.0, 1.0, 1.0))
			gui.hide_keyboard()
			
		end
		
	elseif action_id == hash("type") then

		if textFieldFocused and string.len(g_username) < 15 then

			-- action.text sometimes is longer than 1 so I had to use for loop
			for i = 1, string.len(action.text) do
				
				local ch = string.sub(action.text, i, i) 

				-- we care only about letters and numbers
				if string.match(ch, "%a") or string.match(ch, "%d") then
					g_username = g_username .. ch
					gui.set_text(usernameTextNode, g_username)
				end
			end
			
		end
		
	elseif action_id == hash("key_backspace") and action.repeated then
		
		if textFieldFocused then
			local l = string.len(g_username)
			g_username = string.sub(g_username, 0, l-1) 
			gui.set_text(usernameTextNode, g_username)
		end
		
	elseif action_id == hash("key_back") and action.pressed then
		
		if textFieldFocused then
			textFieldFocused = false
			gui.set_color(textFieldNode, vmath.vector4(1.0, 1.0, 1.0, 1.0))
			msg.post("/go#client", "sendUsername")
		else
			g_showConfirmationWindow()
		end

	elseif action_id == hash("key_enter") and action.released then
		
		if textFieldFocused then
			textFieldFocused = false
			gui.set_color(textFieldNode, vmath.vector4(1.0, 1.0, 1.0, 1.0))
			msg.post("/go#client", "sendUsername")
		end
		
	end
end

function on_reload(self)
	
end
