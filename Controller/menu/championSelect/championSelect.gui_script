local scalingButton = require "util/scalingButton"

local blackBoxNode = nil

local lockActions = nil

local playerIsReady = false

local function buttonPressed(hashedNodeId)

end

local function buttonReleased(hashedNodeId)
	if hashedNodeId == hash("Back") then
		print("Clicked back")
		g_showConfirmationWindow()
		--gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		--gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		--gui.EASING_LINEAR, 0.5, 0, function() msg.post("/go#client", "disconnect") end)
	elseif hashedNodeId == hash("Start") then

		msg.post("/go#client", "sendReady")
		playerIsReady = true
		gui.set_color(gui.get_node("StartImg"), vmath.vector3(1, 1, 1))
		gui.play_flipbook(gui.get_node("StartImg"), "button-ready-selected")
		--lockActions = true

		--gui.hide_keyboard()
		--gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		--gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		--gui.EASING_LINEAR, 0.5, 0, function() g_goToController() end)

		-- show 'waiting for others...' window
		g_showWaitingForOthersWindow()
		

	elseif hashedNodeId == hash("knightButton") then
		msg.post("/go#client", "sendPlayerClass", {playerClass = "knight"})
	elseif hashedNodeId == hash("mageButton") then
		msg.post("/go#client", "sendPlayerClass", {playerClass = "mage"})
	elseif hashedNodeId == hash("rogueButton") then
		msg.post("/go#client", "sendPlayerClass", {playerClass = "rogue"})
	elseif hashedNodeId == hash("archerButton") then
		msg.post("/go#client", "sendPlayerClass", {playerClass = "archer"})
	end

end

local function lockInPlayerClass(class)
	--[[
	gui.set_color(gui.get_node("knightButtonImg"), vmath.vector3(0.5))
	gui.set_color(gui.get_node("mageButtonImg"), vmath.vector3(0.5))
	gui.set_color(gui.get_node("rogueButtonImg"), vmath.vector3(0.5))
	gui.set_color(gui.get_node("archerButtonImg"), vmath.vector3(0.5))
	--]]
	gui.play_flipbook(gui.get_node("knightButtonImg"), "knight")
	gui.play_flipbook(gui.get_node("mageButtonImg"), "mage")
	gui.play_flipbook(gui.get_node("rogueButtonImg"), "rogue")
	gui.play_flipbook(gui.get_node("archerButtonImg"), "archer")

	-- imo its better than 4 if's
	gui.play_flipbook(gui.get_node(class .. "ButtonImg"), class .. "-selected")
	gui.set_color(gui.get_node(class .. "ButtonImg"), vmath.vector3(1))

	-- unlock Ready button
	gui.set_color(gui.get_node("StartImg"), vmath.vector4(1))
	gui.set_color(gui.get_node("StartText"), vmath.vector4(1))
end

local function start(self)
	lockActions = false

	self.playerClassLocked = nil
	playerIsReady = false

	-- send current username to server
	msg.post("/go#client", "sendUsername")

	-- reset button colors and texture
	gui.set_color(gui.get_node("knightButtonImg"), vmath.vector3(1))
	gui.set_color(gui.get_node("mageButtonImg"), vmath.vector3(1))
	gui.set_color(gui.get_node("rogueButtonImg"), vmath.vector3(1))
	gui.set_color(gui.get_node("archerButtonImg"), vmath.vector3(1))
	gui.play_flipbook(gui.get_node("knightButtonImg"), "knight")
	gui.play_flipbook(gui.get_node("mageButtonImg"), "mage")
	gui.play_flipbook(gui.get_node("rogueButtonImg"), "rogue")
	gui.play_flipbook(gui.get_node("archerButtonImg"), "archer")

	gui.set_color(gui.get_node("StartImg"), vmath.vector3(0.3))
	gui.set_color(gui.get_node("StartText"), vmath.vector4(0.3))
	gui.play_flipbook(gui.get_node("StartImg"), "button-ready")

	-- screen is going from black to white
	gui.set_color(blackBoxNode, vmath.vector4(0,0,0,1))
	gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 0.5)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	blackBoxNode = gui.get_node("blackBox")

	self.buttonHolder = {
		backButton = scalingButton.create("Back", 0, buttonReleased, buttonPressed),

		knightButton = scalingButton.create("knightButton", 1, buttonReleased, buttonPressed),
		mageButton = scalingButton.create("mageButton", 1, buttonReleased, buttonPressed),
		rogueButton = scalingButton.create("rogueButton", 1, buttonReleased, buttonPressed),
		archerButton = scalingButton.create("archerButton", 1, buttonReleased, buttonPressed),

		startButton = scalingButton.create("Start", 2, buttonReleased, buttonPressed)
	}

	
	
end

function final(self)

end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable") then
		start(self)
	elseif message_id == hash("disable") then
		g_hideWaitingForOthersWindow()

	elseif message_id == hash("playerClassConfirm") then
		self.playerClassLocked = message.playerClass

		g_playerClass = message.playerClass
		
		-- change color of buttons
		lockInPlayerClass(message.playerClass)

	end
end

function on_input(self, action_id, action)
	if lockActions then
		return
	end
	if action_id == hash("mouse_left") then


		-- BUTTONS
		-- TODO: implement change of player class after clicking
		self.buttonHolder.backButton.mouseUpdate(action)
		--[[
		if self.playerClassLocked == nil then 
			self.buttonHolder.knightButton.mouseUpdate(action)
			self.buttonHolder.mageButton.mouseUpdate(action)
			self.buttonHolder.rogueButton.mouseUpdate(action)
			self.buttonHolder.archerButton.mouseUpdate(action)
		else 
			if not playerIsReady then
				self.buttonHolder.startButton.mouseUpdate(action)
			end
		end
		--]]
		if not playerIsReady then
			self.buttonHolder.knightButton.mouseUpdate(action)
			self.buttonHolder.mageButton.mouseUpdate(action)
			self.buttonHolder.rogueButton.mouseUpdate(action)
			self.buttonHolder.archerButton.mouseUpdate(action)
			if self.playerClassLocked then
				self.buttonHolder.startButton.mouseUpdate(action)
			end
		end
		-- END OF BUTTONS
		
	elseif action_id == hash("key_back") and action.pressed then
		g_showConfirmationWindow()
	end
end

function on_reload(self)

end
