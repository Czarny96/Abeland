
local scalingButton = require "util/scalingButton"
local acc = require "util/accelerometer"

local backgroundNode = nil
local castleNode = nil

-- buttons
local newGameNode = nil
local settingsNode = nil
local exitNode = nil

local blackBoxNode = nil

-- don't react after clicking button
local lockActions = false

local function buttonPressed(hashedNodeId)

end

local function buttonReleased(hashedNodeId)
	if hashedNodeId == hash("NewGame") then
		print("Clicked new game")
		g_showConnectingWindow()
		--lockActions = true
		--gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		--gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		--gui.EASING_LINEAR, 0.5, 0, function() g_goToUsernameField() end)
	elseif hashedNodeId == hash("Exit") then
		print("Clicked exit")
		lockActions = true
		gui.cancel_animation(blackBoxNode, gui.PROP_COLOR)
		gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,1), 
		gui.EASING_LINEAR, 0.5, 0, function() os.exit() end)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	backgroundNode = gui.get_node("bg")
	castleNode = gui.get_node("castle")

	self.cloudNodes = {
		gui.get_node("cloud1"),
		gui.get_node("cloud2"),
		gui.get_node("cloud3"),
		gui.get_node("cloud4"),
		gui.get_node("cloud5")
	}

	self.cloudPos = { }
	for i, cloudNode in pairs(self.cloudNodes) do
		table.insert(self.cloudPos, gui.get_position(cloudNode))
	end

	-- create accelerometer (15 samples)
	self.acc = acc.create(15) 
	--self.acc.calibrate() -- sounds good, doesn't work

	self.backgroundDefaultPos = gui.get_position(backgroundNode)
	self.castleDefaultPos = gui.get_position(castleNode)
	
	blackBoxNode = gui.get_node("blackBox")

	self.buttonHolder = {
		newGameButton = scalingButton.create("NewGame", 0, buttonReleased, buttonPressed),
		exitButton = scalingButton.create("Exit", 0, buttonReleased, buttonPressed)
	}	
	
end

local function start(self)
	lockActions = false

	-- screen is going from black to white
	gui.set_color(blackBoxNode, vmath.vector4(0,0,0,1))
	gui.animate(blackBoxNode, gui.PROP_COLOR, vmath.vector4(0,0,0,0), gui.EASING_LINEAR, 0.5)

	gui.hide_keyboard()
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

local function clamp(x, min, max)
	if x < min then x = min elseif x > max then x = max end
	return x
end

function update(self, dt)
	
	-- read accelerometer values 
	local accData = self.acc.adjusted()
	accData.x = clamp(accData.x, -0.4, 0.4) -- probably best values
	accData.y = accData.y + 0.55
	accData.y = clamp(accData.y, -1, 0)
	accData.z = 0

	-- move menu elements (parallax effect)
	local newBackgroundPos = self.backgroundDefaultPos + accData * 70
	gui.set_position(backgroundNode, newBackgroundPos)
	
	local newCastlePos = self.castleDefaultPos + accData * 150
	gui.set_position(castleNode, newCastlePos)
	

	for i, cloudPos in pairs(self.cloudPos) do 
		cloudPos.x = cloudPos.x + 5.0 * dt * (cloudPos.y / 100.0)
		
		if cloudPos.x > 2400 then
			-- cloud flied outside screen
			cloudPos.x = -400
			cloudPos.y = math.random(770, 1050)
		end

	end

	for i, cloudPos in pairs(self.cloudPos) do
		local newCloudPos = cloudPos + accData * 120
		gui.set_position(self.cloudNodes[i], newCloudPos)
	end

	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("enable") then
		start(self)
	elseif message_id == hash("disable") then
	elseif message_id == hash("endGame") then
		buttonReleased(hash("Exit"))

		-- SAVE USERNAME 
		print("Saving username...")
		local uname = {}
		table.insert(uname, tostring(g_username))
		local filePath = sys.get_save_file("AbelandController", "username")
		if not sys.save(filePath, uname) then
			print("FAILED TO WRITE USERNAME ON DISK")
		end
	end
end

function on_input(self, action_id, action)
	
	-- feed accelerometer buffer with calibration data
	self.acc.on_input(action)
	
	if action_id == hash("mouse_left") then
		
		if lockActions then-- or g_connectingWindowIsOn or g_dcWindowIsOn then
			return
		end
		
		for idx, button in pairs(self.buttonHolder) do
			button.mouseUpdate(action)
		end
	elseif action_id == hash("key_back") and action.pressed then
		g_showConfirmationWindow()
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
