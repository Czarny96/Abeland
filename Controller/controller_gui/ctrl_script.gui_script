local tcp_client = require "defnet.tcp_client"

local SERVER_PORT = 5555
local WAS_SERVER_FOUND = false
local WAS_CLIENT_SETUP = false
local p2p_discovery = require "defnet.p2p_discovery"
local PORT = 50000
local SERVER_ADRESS =  nil

local joystickDefaultPos = vmath.vector3()
local joystickValue = {x=0, y=0} -- [-1, 1]
local prevJoystickValue = {x=0, y=0}
local joystickMaxDist = 200 
local joystickHolding = false 

local blueButton = {id = "btn_blue", isPressed = false}
local greenButton = {id = "btn_green", isPressed = false}
local redButton = {id = "btn_red", isPressed = false}
local yellowButton = {id = "btn_yellow", isPressed = false}
local buttonCollection = {blueButton, greenButton, redButton, yellowButton}

function init(self)
	msg.post(".", "acquire_input_focus")

	-- get center position of virtual joystick
	local joystick = gui.get_node("gałka_front")
	joystickDefaultPos = gui.get_position(joystick)
	
	-- server discovery
	self.p2p = p2p_discovery.create(PORT)

	
	self.p2p.listen("findme", function(ip, port)
		print("Found server", ip, port)
		SERVER_ADRESS = ip 
	end)
	
end

function final(self)
	if self.client then
		self.client.destroy()
	end
end

function update(self, dt)
	self.p2p.update()
	
	
	
	if SERVER_ADRESS ~= nill and SERVER_ADRESS ~= true then
		WAS_SERVER_FOUND = true
	end
	
	if WAS_SERVER_FOUND == true and WAS_CLIENT_SETUP == false then
		
		local client, err = tcp_client.create(SERVER_ADRESS, SERVER_PORT,
		function(data)
			print(data)
		end,
		function()
			self.client = nil
		end)
		if client then
			self.client = client
			gui.set_text(gui.get_node("debugText1"), "Connected")
		else
			print(err)
			gui.set_text(gui.get_node("debugText1"), "Connection failed")
		end
		WAS_CLIENT_SETUP = true
	end	
	
	if self.client then
		self.client.update()
	end
	
	if joystickValue.x ~= prevJoystickValue.x or joystickValue.y ~= prevJoystickValue.y then
		if self.client then
			self.client.send("GałaSeby: x-" .. tostring(joystickValue.x) .. " y-" .. tostring(joystickValue.y) .. "\r\n")
		end
	end
	
	prevJoystickValue.x = joystickValue.x
	prevJoystickValue.y = joystickValue.y
	
end

function buttonPressed(self, color_id)
	if color_id == blueButton.id then
		gui.set_text(gui.get_node("debugText"), "blue")
		self.client.send("BlueClick " .. tostring(os.time()) .. "\r\n")
	elseif color_id == greenButton.id then
		gui.set_text(gui.get_node("debugText"), "green")
		self.client.send("GreenClick " .. tostring(os.time()) .. "\r\n")
	elseif color_id == redButton.id then
		gui.set_text(gui.get_node("debugText"), "red")
		self.client.send("RedClick ")-- .. tostring(os.time()) .. "\r\n")
	elseif color_id == yellowButton.id then
		gui.set_text(gui.get_node("debugText"), "yellow")
		self.client.send("YellowClick " .. tostring(os.time()) .. "\r\n")
	end
end


function buttonReleased(self, color_id)
	local testMessage = "" -- you can remove it
	if color_id == blueButton.id then
		testMessage = testMessage .. "blue"
	elseif color_id == greenButton.id then
		testMessage = testMessage .. "green"
	elseif color_id == redButton.id then
		testMessage = testMessage .. "red"
	elseif color_id == yellowButton.id then
		testMessage = testMessage .. "yellow"
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function setJoystickPosition(x, y)
	
	-- VIRTUAL JOYSTICK
	local button = gui.get_node("gałka_front")
	if gui.pick_node(button, x, y) --[[or joystickHolding--]] then
		gui.set_scale(button, vmath.vector3(1.3))
		joystickHolding = true

		local pos = gui.get_position(button)
		local diff = vmath.vector3(x, y, 0) - joystickDefaultPos
		local len = vmath.length(diff)

		if len < joystickMaxDist then
			-- joystick is inside circle
			gui.set_position(button, vmath.vector3(x, y, 0))
			joystickValue.x = diff.x / joystickMaxDist
			joystickValue.y = diff.y / joystickMaxDist
		else 
			-- joystick is on the edge of circle
			local normalized = vmath.normalize(diff)
			gui.set_position(button, joystickDefaultPos + normalized * joystickMaxDist)
			joystickValue.x = normalized.x
			joystickValue.y = normalized.y
		end

	end
	-- END OF VIRTUAL JOYSTICK
end

function on_input(self, action_id, action)
	-- MOUSE INPUT
	-- if action_id == hash("mouse_left") then
	-- 	setJoystickPosition(action.x, action.y)
	-- 	-- GAME BUTTONS
	-- 	local button = nil
	-- 	for i=1, #buttonCollection do
	-- 		button = gui.get_node(buttonCollection[i].id)
	-- 		if gui.pick_node(button, action.x, action.y) then
	-- 			gui.set_scale(button, vmath.vector3(0.9))
	-- 		end
	-- 		local pos = gui.get_position(button)
	-- 	end
	-- 	-- END OF GAME BUTTONS
		
	-- end	

	-- if action_id == hash("mouse_left") and action.released then
	-- 	-- move joystick to default position when thumb is up
	-- 	local joystick = gui.get_node("gałka_front")
	-- 	gui.set_scale(joystick, vmath.vector3(1.0))
	-- 	joystickHolding = false
	-- 	gui.set_position(joystick, joystickDefaultPos)
	-- end
	-- END OF MOUSE INPUT

	--MULTITOUCH 

	if action_id == hash("multitouch") then
		joystickHolding = false
		for i, touchdata in ipairs(action.touch) do
			setJoystickPosition(touchdata.x, touchdata.y)
	
			-- check game buttons states
			for btnIdx=1, 4 do
				local button = gui.get_node(buttonCollection[btnIdx].id)
				if gui.pick_node(button, touchdata.x, touchdata.y) then
					if action.touch[i].pressed then
						gui.set_scale(button, vmath.vector3(0.9))
						buttonPressed(self, buttonCollection[btnIdx].id)
						buttonCollection[btnIdx].isPressed = true
					elseif action.touch[i].released then
						gui.set_scale(button, vmath.vector3(1.0))
						buttonReleased(self, buttonCollection[btnIdx].id)
						buttonCollection[btnIdx].isPressed = false
					end
				end
			end	
		end

		if not joystickHolding then
			-- move joystick to default position when thumb is up
			local joystick = gui.get_node("gałka_front")
			gui.set_scale(joystick, vmath.vector3(1.4))
			gui.set_position(joystick, joystickDefaultPos)
			joystickValue.x = 0
			joystickValue.y = 0
		end
	end

	--END OF MULTITOUCH
	
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
